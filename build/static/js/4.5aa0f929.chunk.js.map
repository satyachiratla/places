{"version":3,"sources":["shared/components/UIElements/Card.js","shared/util/validators.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/components/FormElements/ImageUpload.js","user/pages/Auth.js"],"names":["Card","props","className","style","children","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","type","VALIDATOR_MINLENGTH","val","VALIDATOR_EMAIL","validate","value","validators","isValid","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","validator","trim","test","inputReducer","state","action","isTouched","Input","useReducer","initialValue","initialValid","inputState","dispatch","id","onInput","useEffect","changeHandler","event","target","touchHandler","element","placeholder","onChange","onBlur","rows","htmlFor","label","errorText","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","ImageUpload","useState","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","fileReader","FileReader","onload","result","readAsDataURL","ref","accept","display","pickedFile","fileIsValid","files","center","src","alt","onClick","current","click","Auth","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","email","password","inputHandler","setFormData","authSubmitHandler","a","preventDefault","process","JSON","stringify","responseData","login","userId","token","formData","FormData","append","name","image","Fragment","onClear","asOverlay","onSubmit","disabled","inverse","undefined","prevMode"],"mappings":"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","file":"static/js/4.5aa0f929.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import React, { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n    case 'TOUCH': {\n      return {\n        ...state,\n        isTouched: true\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid)\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${!inputState.isValid && inputState.isTouched &&\n        'form-control--invalid'}`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid }\n        },\n        isValid: formIsValid\n      };\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};","import React, { useEffect, useRef, useState } from \"react\";\nimport Button from \"./Button\";\nimport \"./ImageUpload.css\";\n\nconst ImageUpload = (props) => {\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState();\n\n  const filePickerRef = useRef();\n\n  useEffect(() => {\n      if (!file) {\n          return;\n      }\n      const fileReader = new FileReader();\n      fileReader.onload = () => {\n          setPreviewUrl(fileReader.result);\n      }\n      fileReader.readAsDataURL(file);\n  }, [file])\n\n  const pickedHandler = (event) => {\n    let pickedFile;\n    let fileIsValid = isValid;\n    if (event.target.files && event.target.files.length === 1) {\n        pickedFile = event.target.files[0];\n        setFile(pickedFile);\n        setIsValid(true);\n        fileIsValid = true\n    } else {\n        setIsValid(false);\n        fileIsValid = false;\n    }\n    props.onInput(props.id, pickedFile, fileIsValid)\n  };\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n  return (\n    <div className=\"form-control\">\n      <input\n        type=\"file\"\n        ref={filePickerRef}\n        id={props.id}\n        accept=\".png,.jpg,.jpeg\"\n        style={{ display: \"none\" }}\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && \"center\"}`}>\n        <div className=\"image-upload__preview\">\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n          {!previewUrl && <p>Please pick an Image</p>}\n        </div>\n        <Button type=\"button\" onClick={pickImageHandler}>\n          PICK IMAGE\n        </Button>\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","import React, { useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './Auth.css';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false\n      },\n      password: {\n        value: '',\n        isValid: false\n      }\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n          image: undefined\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: '',\n            isValid: false\n          },\n          image: {\n            value: null,\n            isValid: false\n          }\n        },\n        false\n      );\n    }\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const authSubmitHandler = async event => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + '/users/login',\n          'POST',\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          }),\n          {\n            'Content-Type': 'application/json'\n          }\n        );\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {}\n    } else {\n      try {\n        const formData = new FormData();\n        formData.append('email', formState.inputs.email.value);\n        formData.append('name', formState.inputs.name.value);\n        formData.append('password', formState.inputs.password.value);\n        formData.append('image', formState.inputs.image.value);\n\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + '/users/signup',\n          'POST',\n          formData\n        );\n\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {}\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter a name.\"\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoginMode && <ImageUpload center id='image' onInput={inputHandler} errorText=\"Please provide an image\" />}\n          <Input\n            element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"E-Mail\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address.\"\n            onInput={inputHandler}\n          />\n          <Input\n            element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(8)]}\n            errorText=\"Please enter a valid password, at least 8 characters.\"\n            onInput={inputHandler}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n        </Button>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Auth;\n"],"sourceRoot":""}